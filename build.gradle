defaultTasks "clean", "build"

usePlugin "java"
usePlugin "maven"
usePlugin 'eclipse'
usePlugin 'war'
usePlugin 'jetty'

sourceCompatibility = 1.6
group = "com.appspot"
version = "${version}"

configurations {
	providedCompile
	compile {
		transitive = true
	}
	sources
}

processResources << {
	copy{
	 from new File('src/main/java')
	 into new File('build/classes/main')
	 exclude ('**/*.java')
	}
}

repositories {
    mavenCentral()
	mavenRepo urls: "http://objectify-appengine.googlecode.com/svn/maven"
	mavenRepo urls: "http://maven-gae-plugin.googlecode.com/svn/repository"
}

dependencies {
	compile	"com.google.appengine:appengine-api-1.0-sdk:1.3.5",
			"com.google.inject:guice:2.0",
			"com.google.inject.extensions:guice-servlet:2.0",
			"org.apache.wicket:wicket-guice:1.4.9",
			"org.slf4j:slf4j-jdk14:1.5.8",
			"com.googlecode.objectify:objectify:2.2.1",
			"com.google.appengine:geronimo-jpa_3.0_spec:1.1.1"
}

sourceSets {
	main {
		resources {
		    srcDir 'src/main/resources'
	        srcDir 'src/main/webapp'
        }
	}
}

task sourcesConfig {
	description = "find all dependencies and place them into sources configuration"
	def first = configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies
	def counter = 0;
	def dependz = []
	
	def findDependz
	// recursive closure
	findDependz = { params ->
		counter++;
		params.each { module ->
			if(!dependz.contains("$module.group:$module.name:$module.version")) {
				dependz.add("$module.group:$module.name:$module.version");
			}
			findDependz(module.children)
		}
		counter--
		
	}
	
	findDependz(first)

	// build sources configuration
	dependz.each { d ->
	
		// ignore following jars that don't have source in maven
		if(d.contains("guice") || d.contains("guice-servlet") || d.contains("geronimo-jpa_3.0_spec") || d.contains("appengine-api-1.0-sdk"))
			return
		dependencies {
			// copy into source config
			sources "" + d
		}
	}
}

task src(depeondsOn: sourcesConfig, type: Copy) {
	description = "download source jars from maven repositories"
	from {
		// Copy the compile configuration and replace the main artifact with the source artifact for each dep
		def conf = configurations.sources.copyRecursive { it instanceof ExternalModuleDependency }
		conf.dependencies.each { dep ->
			dep.artifact {
				group = dep.group
				name = dep.name
				version = dep.version
				classifier = 'sources'
				type = 'jar'
			}
		}
		conf
	}
	into 'sources'
	// Add this to clean the target dir first. For Gradle 0.9, you'd use the Sync task instead
	doFirst {
		ant.delete(dir: destinationDir)
	}
}